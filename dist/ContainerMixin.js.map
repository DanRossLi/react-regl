{"version":3,"sources":["../src/ContainerMixin.js"],"names":["injectAfter","parentNode","referenceNode","node","ContainerMixin","moveChild","child","afterNode","toIndex","lastIndex","childNode","_mountImage","createChild","removeChild","remove","updateChildrenAtRoot","nextChildren","transaction","updateChildren","mountAndInjectChildrenAtRoot","children","mountAndInjectChildren","context","_updateChildren","mountedImages","mountChildren","i","key","_renderedChildren","hasOwnProperty","add","Object","assign","Mixin"],"mappings":";;;;;;AAAA;;;;;;AAGA,SAASA,WAAT,CAAqBC,UAArB,EAAiCC,aAAjC,EAAgDC,IAAhD,EAAsD;AACpD;;;;;AAKD;;AAED,IAAMC,iBAAiB;AACrBC,WADqB,qBACXC,KADW,EACJC,SADI,EACOC,OADP,EACgBC,SADhB,EAC2B;AAC9C,QAAMC,YAAYJ,MAAMK,WAAxB;AACAX,gBAAY,KAAKG,IAAjB,EAAuBI,SAAvB,EAAkCG,SAAlC;AACD,GAJoB;AAMrBE,aANqB,uBAMTN,KANS,EAMFC,SANE,EAMSG,SANT,EAMoB;AACvCJ,UAAMK,WAAN,GAAoBD,SAApB;AACAV,gBAAY,KAAKG,IAAjB,EAAuBI,SAAvB,EAAkCG,SAAlC;AACD,GAToB;AAWrBG,aAXqB,uBAWTP,KAXS,EAWF;AACjB,QAAMI,YAAYJ,MAAMK,WAAxB;AACAL,UAAMK,WAAN,GAAoB,IAApB;AACA,SAAKR,IAAL,CAAUW,MAAV,CAAiBJ,SAAjB;AACD,GAfoB;AAiBrBK,sBAjBqB,gCAiBAC,YAjBA,EAiBcC,WAjBd,EAiB2B;AAC9C,SAAKC,cAAL,CAAoBF,YAApB,EAAkCC,WAAlC,EAA+C,EAA/C;AACD,GAnBoB;AAqBrBE,8BArBqB,wCAqBQC,QArBR,EAqBkBH,WArBlB,EAqB+B;AAClD,SAAKI,sBAAL,CAA4BD,QAA5B,EAAsCH,WAAtC,EAAmD,EAAnD;AACD,GAvBoB;AAyBrBC,gBAzBqB,0BAyBNF,YAzBM,EAyBQC,WAzBR,EAyBqBK,OAzBrB,EAyB8B;AACjD,SAAKC,eAAL,CAAqBP,YAArB,EAAmCC,WAAnC,EAAgDK,OAAhD;AACD,GA3BoB;AA6BrBD,wBA7BqB,kCA6BED,QA7BF,EA6BYH,WA7BZ,EA6ByBK,OA7BzB,EA6BkC;AACrD,QAAME,gBAAgB,KAAKC,aAAL,CACpBL,QADoB,EAEpBH,WAFoB,EAGpBK,OAHoB,CAAtB;;AAMA,QAAII,IAAI,CAAR;AACA,SAAK,IAAIC,GAAT,IAAgB,KAAKC,iBAArB,EAAwC;AACtC,UAAI,KAAKA,iBAAL,CAAuBC,cAAvB,CAAsCF,GAAtC,CAAJ,EAAgD;AAC9C,YAAMrB,QAAQ,KAAKsB,iBAAL,CAAuBD,GAAvB,CAAd;AACArB,cAAMK,WAAN,GAAoBa,cAAcE,CAAd,CAApB;AACA,aAAKvB,IAAL,CAAU2B,GAAV,CAAcN,aAAd;AACAE;AACD;AACF;AAEF;AA9CoB,CAAvB;;kBAiDeK,OAAOC,MAAP,CAAc,0BAAgBC,KAA9B,EAAqC7B,cAArC,C","file":"ContainerMixin.js","sourcesContent":["import ReactMultiChild from 'react-dom/lib/ReactMultiChild';\n\n\nfunction injectAfter(parentNode, referenceNode, node) {\n  /* if (referenceNode === null) {\n   *   parentNode.insertFirst(node);\n   * } else {\n   *   parentNode.insertAfter(referenceNode, node);\n   * }*/\n}\n\nconst ContainerMixin = {\n  moveChild(child, afterNode, toIndex, lastIndex) {    \n    const childNode = child._mountImage;\n    injectAfter(this.node, afterNode, childNode);\n  },\n\n  createChild(child, afterNode, childNode) {\n    child._mountImage = childNode;\n    injectAfter(this.node, afterNode, childNode);\n  },\n\n  removeChild(child) {\n    const childNode = child._mountImage;\n    child._mountImage = null;\n    this.node.remove(childNode);\n  },\n\n  updateChildrenAtRoot(nextChildren, transaction) {\n    this.updateChildren(nextChildren, transaction, {});\n  },\n\n  mountAndInjectChildrenAtRoot(children, transaction) {\n    this.mountAndInjectChildren(children, transaction, {});\n  },\n\n  updateChildren(nextChildren, transaction, context) {\n    this._updateChildren(nextChildren, transaction, context);\n  },\n\n  mountAndInjectChildren(children, transaction, context) {\n    const mountedImages = this.mountChildren(\n      children,\n      transaction,\n      context\n    );\n\n    let i = 0;\n    for (let key in this._renderedChildren) {\n      if (this._renderedChildren.hasOwnProperty(key)) {\n        const child = this._renderedChildren[key];\n        child._mountImage = mountedImages[i];\n        this.node.add(mountedImages);\n        i++;\n      }\n    }\n    \n  }\n};\n\nexport default Object.assign(ReactMultiChild.Mixin, ContainerMixin);\n"]}